
import logging
import os
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get("BOT_TOKEN")

# –ú–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    [['üíê –ö–∞—Ç–∞–ª–æ–≥', 'üõç –ó–∞–∫–∞–∑–∞—Ç—å'], ['üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã']],
    resize_keyboard=True
)

catalog_menu = ReplyKeyboardMarkup(
    [['üåπ –ë—É–∫–µ—Ç 1'], ['üå∑ –ë—É–∫–µ—Ç 2'], ['üåª –ë—É–∫–µ—Ç 3'], ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']],
    resize_keyboard=True
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
user_data = {}
availability = {"1": 0, "2": 2, "3": 10}

date_options = ["24 –∞–ø—Ä–µ–ª—è 2025", "25 –∞–ø—Ä–µ–ª—è 2025", "26 –∞–ø—Ä–µ–ª—è 2025"]
time_slots = ["—Å 9:00 –¥–æ 12:00", "—Å 12:00 –¥–æ 15:00", "—Å 15:00 –¥–æ 18:00"]

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Flora –ü–µ—Ä–º—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.message.from_user.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–∞–ø–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if user_id in user_data and user_data[user_id].get("waiting_for") == "name_phone":
        user_data[user_id]["name_phone"] = text
        bouquet = user_data[user_id]["bouquet"]
        date = user_data[user_id]["date"]
        time = user_data[user_id]["time"]
        name_phone = user_data[user_id]["name_phone"]

        await update.message.reply_text(
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!\n\n"
            f"–ë—É–∫–µ—Ç: {bouquet}\n"
            f"–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {date}\n"
            f"–í—Ä–µ–º—è: {time}\n"
            f"–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω: {name_phone}"
        )
        del user_data[user_id]
        return

    # –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞
    if text == 'üíê –ö–∞—Ç–∞–ª–æ–≥':
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–µ—Ç:", reply_markup=catalog_menu)

    elif text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

    elif text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã':
        await update.message.reply_text(
            "üìç –ü–µ—Ä–º—å, –ö–∞—Ä–ø–∏–Ω—Å–∫–æ–≥–æ 91–¥\nüìû +7 (342) 214-88-99\n‚è∞ 9:00‚Äì21:00"
        )

    elif text == 'üõç –ó–∞–∫–∞–∑–∞—Ç—å':
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–µ—Ç –≤ –ö–∞—Ç–∞–ª–æ–≥–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–∫–∞–∑–∞—Ç—å'")

    elif text == 'üåπ –ë—É–∫–µ—Ç 1':
        await update.message.reply_photo(
            photo="https://floraservis.ru/upload/iblock/0d3/nkr6256qhf6b79bdh86ezgl9kufycbei.jpeg",
            caption="üåπ –ë—É–∫–µ—Ç 1 ‚Äî 18230‚ÇΩ\n‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
        )

    elif text == 'üå∑ –ë—É–∫–µ—Ç 2':
        count = availability["2"]
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å üå∑", callback_data="order_2")]
        ])
        await update.message.reply_photo(
            photo="https://floraservis.ru/upload/iblock/0fc/abo9003vbqn2fusdjosgknhsxwczpq7j.jpeg",
            caption=f"üå∑ –ë—É–∫–µ—Ç 2 ‚Äî 18230‚ÇΩ\n–í –Ω–∞–ª–∏—á–∏–∏: {count} —à—Ç.",
            reply_markup=keyboard
        )

    elif text == 'üåª –ë—É–∫–µ—Ç 3':
        count = availability["3"]
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å üåª", callback_data="order_3")]
        ])
        await update.message.reply_photo(
            photo="https://floraservis.ru/upload/iblock/e25/f2bvr479poaj4h1qp9fx6o41slldkwqt.jpg",
            caption=f"üåª –ë—É–∫–µ—Ç 3 ‚Äî 32600‚ÇΩ\n–í –Ω–∞–ª–∏—á–∏–∏: {count} —à—Ç.",
            reply_markup=keyboard
        )

    else:
        await update.message.reply_text("–Ø –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É üòä")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–ó–∞–∫–∞–∑–∞—Ç—å"
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    action = query.data

    if action.startswith("order_"):
        bouquet_id = action.split("_")[1]

        if availability[bouquet_id] == 0:
            await query.message.reply_text("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ–≥–æ –±—É–∫–µ—Ç–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
        names = {"1": "üåπ –ë—É–∫–µ—Ç 1", "2": "üå∑ –ë—É–∫–µ—Ç 2", "3": "üåª –ë—É–∫–µ—Ç 3"}
        user_data[user_id] = {
            "bouquet_id": bouquet_id,
            "bouquet": names[bouquet_id],
        }

        # –ö–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(date, callback_data=f"date_{date}")] for date in date_options
        ])
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=keyboard)

    elif action.startswith("date_"):
        date = action.split("date_")[1]
        user_data[user_id]["date"] = date

        # –ö–Ω–æ–ø–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(t, callback_data=f"time_{t}")] for t in time_slots
        ])
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:", reply_markup=keyboard)

    elif action.startswith("time_"):
        time = action.split("time_")[1]
        user_data[user_id]["time"] = time
        user_data[user_id]["waiting_for"] = "name_phone"

        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.error("Exception while handling an update:", exc_info=context.error)
    if update and hasattr(update, "message") and update.message:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è!")

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(handle_callback))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
app.add_error_handler(error_handler)

app.run_polling()
