
import logging
import os
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get("BOT_TOKEN")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    [['üíê –ö–∞—Ç–∞–ª–æ–≥', 'üõç –ó–∞–∫–∞–∑–∞—Ç—å'], ['üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã']],
    resize_keyboard=True
)

# –ú–µ–Ω—é –∫–∞—Ç–∞–ª–æ–≥–∞
catalog_menu = ReplyKeyboardMarkup(
    [['üåπ –ë—É–∫–µ—Ç 1'], ['üå∑ –ë—É–∫–µ—Ç 2'], ['üåª –ë—É–∫–µ—Ç 3'], ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']],
    resize_keyboard=True
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
user_state = {}
bouquet_stock = {'1': 0, '2': 5, '3': 5}  # –ë—É–∫–µ—Ç 1 ‚Äî –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_state.pop(update.effective_chat.id, None)  # –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Flora –ü–µ—Ä–º—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –∫–Ω–æ–ø–æ–∫
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    chat_id = update.effective_chat.id

    if text == 'üíê –ö–∞—Ç–∞–ª–æ–≥':
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–µ—Ç:", reply_markup=catalog_menu)

    elif text in ['üåπ –ë—É–∫–µ—Ç 1', 'üå∑ –ë—É–∫–µ—Ç 2', 'üåª –ë—É–∫–µ—Ç 3']:
        bouquet_id = text.split()[-1]
        user_state[chat_id] = {"bouquet": bouquet_id}

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è
        if bouquet_stock.get(bouquet_id, 0) <= 0:
            await update.message.reply_photo(
                photo="https://floraservis.ru/upload/iblock/0d3/nkr6256qhf6b79bdh86ezgl9kufycbei.jpeg",
                caption=f"{text} ‚Äî –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
            )
            return

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f"order_{bouquet_id}")]
        ])
        photo_url = {
            '1': "https://floraservis.ru/upload/iblock/0d3/nkr6256qhf6b79bdh86ezgl9kufycbei.jpeg",
            '2': "https://floraservis.ru/upload/iblock/0fc/abo9003vbqn2fusdjosgknhsxwczpq7j.jpeg",
            '3': "https://floraservis.ru/upload/iblock/e25/f2bvr479poaj4h1qp9fx6o41slldkwqt.jpg",
        }
        price = {'1': "18230‚ÇΩ", '2': "18230‚ÇΩ", '3': "32600‚ÇΩ"}

        await update.message.reply_photo(
            photo=photo_url[bouquet_id],
            caption=f"{text} ‚Äî {price[bouquet_id]}",
            reply_markup=keyboard
        )

    elif text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

    elif text == 'üõç –ó–∞–∫–∞–∑–∞—Ç—å':
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.")

    elif text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã':
        await update.message.reply_text("üìç –ü–µ—Ä–º—å, –ö–∞—Ä–ø–∏–Ω—Å–∫–æ–≥–æ 91–¥\nüìû +7 (342) 214-88-99\n‚è∞ 9:00‚Äì21:00")

    # –õ–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    elif chat_id in user_state:
        state = user_state[chat_id]
        if "date" not in state:
            state["date"] = text
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=ReplyKeyboardMarkup(
                [['9:00‚Äì12:00', '12:00‚Äì15:00', '15:00‚Äì18:00']], resize_keyboard=True
            ))
        elif "time" not in state:
            state["time"] = text
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        elif "name" not in state:
            state["name"] = text
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        elif "phone" not in state:
            state["phone"] = text
            await confirm_order(update, context, state)
            user_state.pop(chat_id)  # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞
        else:
            await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.")
    else:
        await update.message.reply_text("–Ø –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É üòä")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫–∞–∑–∞—Ç—å"
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    bouquet_id = query.data.split("_")[1]
    user_state[chat_id] = {"bouquet": bouquet_id}

    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=ReplyKeyboardMarkup(
        [['–°–µ–≥–æ–¥–Ω—è', '–ó–∞–≤—Ç—Ä–∞', '–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞']], resize_keyboard=True
    ))

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE, state):
    bouquet_names = {'1': 'üåπ –ë—É–∫–µ—Ç 1', '2': 'üå∑ –ë—É–∫–µ—Ç 2', '3': 'üåª –ë—É–∫–µ—Ç 3'}
    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!\n\n"
        f"{bouquet_names[state['bouquet']]}\n"
        f"–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {state['date']}\n"
        f"–í—Ä–µ–º—è: {state['time']}\n"
        f"–ò–º—è: {state['name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {state['phone']}"
    )
    # –£–º–µ–Ω—å—à–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫
    bouquet_stock[state['bouquet']] -= 1

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:", exc_info=context.error)
    if update and hasattr(update, 'message') and update.message:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(handle_callback))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
app.add_error_handler(error_handler)
app.run_polling()
