
import logging
import os
from telegram import (
    Update, ReplyKeyboardMarkup, InlineKeyboardMarkup,
    InlineKeyboardButton, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω
TOKEN = os.environ.get("BOT_TOKEN")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    [['üíê –ö–∞—Ç–∞–ª–æ–≥', 'üõç –ó–∞–∫–∞–∑–∞—Ç—å'], ['üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã']],
    resize_keyboard=True
)

# –ö–∞—Ç–∞–ª–æ–≥
catalog_menu = ReplyKeyboardMarkup(
    [['üåπ –ë—É–∫–µ—Ç 1'], ['üå∑ –ë—É–∫–µ—Ç 2'], ['üåª –ë—É–∫–µ—Ç 3'], ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']],
    resize_keyboard=True
)

# –î–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏
delivery_dates = ["–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞", "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"]
delivery_times = ["10:00 ‚Äì 13:00", "13:00 ‚Äì 17:00", "17:00 ‚Äì 20:00"]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_state = {}

# –ë—É–∫–µ—Ç—ã –∏ –∏—Ö –Ω–∞–ª–∏—á–∏–µ
bouquets = {
    "1": {"name": "üåπ –ë—É–∫–µ—Ç 1", "price": "18230‚ÇΩ", "photo": "https://floraservis.ru/upload/iblock/0d3/nkr6256qhf6b79bdh86ezgl9kufycbei.jpeg", "available": False},
    "2": {"name": "üå∑ –ë—É–∫–µ—Ç 2", "price": "18230‚ÇΩ", "photo": "https://floraservis.ru/upload/iblock/0fc/abo9003vbqn2fusdjosgknhsxwczpq7j.jpeg", "available": True},
    "3": {"name": "üåª –ë—É–∫–µ—Ç 3", "price": "32600‚ÇΩ", "photo": "https://floraservis.ru/upload/iblock/e25/f2bvr479poaj4h1qp9fx6o41slldkwqt.jpg", "available": True},
}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Flora –ü–µ—Ä–º—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

# –ö–Ω–æ–ø–∫–∏ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id

    if text == 'üíê –ö–∞—Ç–∞–ª–æ–≥':
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–µ—Ç:", reply_markup=catalog_menu)

    elif text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

    elif text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã':
        await update.message.reply_text("üìç –ü–µ—Ä–º—å, –ö–∞—Ä–ø–∏–Ω—Å–∫–æ–≥–æ 91–¥\nüìû +7 (342) 214-88-99\n‚è∞ 9:00‚Äì21:00")

    elif text.startswith('üåπ') or text.startswith('üå∑') or text.startswith('üåª'):
        bouquet_id = text.split()[-1]
        data = bouquets.get(bouquet_id)

        if not data:
            await update.message.reply_text("–¢–∞–∫–æ–≥–æ –±—É–∫–µ—Ç–∞ –Ω–µ—Ç.")
            return

        if not data["available"]:
            await update.message.reply_text(f"{data['name']} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.")
            return

        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton(f"–ó–∞–∫–∞–∑–∞—Ç—å {data['name']}", callback_data=f"order_{bouquet_id}")]])
        await update.message.reply_photo(photo=data['photo'], caption=f"{data['name']} ‚Äî {data['price']}", reply_markup=keyboard)

    elif user_id in user_state:
        step = user_state[user_id].get("step")
        if step == "name":
            user_state[user_id]["name"] = text
            user_state[user_id]["step"] = "phone"
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        elif step == "phone":
            user_state[user_id]["phone"] = text
            user_state[user_id]["step"] = "date"
            buttons = [[InlineKeyboardButton(d, callback_data=f"date_{d}")] for d in delivery_dates]
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=InlineKeyboardMarkup(buttons))
        else:
            await update.message.reply_text("–Ø –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É üòä")
    else:
        await update.message.reply_text("–Ø –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É üòä")

# –ö–Ω–æ–ø–∫–∞ "–ó–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç"
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if query.data.startswith("order_"):
        bouquet_id = query.data.split("_")[1]
        data = bouquets.get(bouquet_id)

        if not data or not data["available"]:
            await query.message.reply_text(f"{data['name']} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –±—É–∫–µ—Ç–∞
        user_state[user_id] = {
            "step": "name",
            "bouquet_id": bouquet_id,
            "bouquet_name": data["name"]
        }
        await query.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {data['name']}. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

    elif query.data.startswith("date_"):
        date = query.data.split("_")[1]
        user_state[user_id]["date"] = date
        user_state[user_id]["step"] = "time"
        buttons = [[InlineKeyboardButton(t, callback_data=f"time_{t}")] for t in delivery_times]
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=InlineKeyboardMarkup(buttons))

    elif query.data.startswith("time_"):
        time = query.data.split("_")[1]
        state = user_state.get(user_id, {})
        state["time"] = time

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–∫–∞–∑
        summary = (
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!\n\n"
            f"–ë—É–∫–µ—Ç: {state.get('bouquet_name')}\n"
            f"–ò–º—è: {state.get('name')}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {state.get('phone')}\n"
            f"–î–∞—Ç–∞: {state.get('date')}\n"
            f"–í—Ä–µ–º—è: {state.get('time')}"
        )

        await query.message.reply_text(summary, reply_markup=main_menu)
        user_state.pop(user_id, None)  # –æ—á–∏—â–∞–µ–º

# –ó–∞–ø—É—Å–∫
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(handle_callback))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

app.run_polling()
