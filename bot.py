
import logging
import os
from telegram import (
    Update, ReplyKeyboardMarkup,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)
from datetime import datetime, timedelta

logging.basicConfig(level=logging.INFO)

TOKEN = os.environ.get("BOT_TOKEN")

main_menu = ReplyKeyboardMarkup(
    [['üíê –ö–∞—Ç–∞–ª–æ–≥', 'üõç –ó–∞–∫–∞–∑–∞—Ç—å'], ['üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã']],
    resize_keyboard=True
)

catalog_menu = ReplyKeyboardMarkup(
    [['üåπ –ë—É–∫–µ—Ç 1'], ['üå∑ –ë—É–∫–µ—Ç 2'], ['üåª –ë—É–∫–µ—Ç 3'], ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']],
    resize_keyboard=True
)

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_state = {}

# –û—Å—Ç–∞—Ç–∫–∏
stock = {
    "1": 0,  # –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏
    "2": 2,  # 2 —à—Ç—É–∫–∏
    "3": 999  # –ú–Ω–æ–≥–æ
}

# –§–æ—Ä–º–∏—Ä—É–µ–º 3 –±–ª–∏–∂–∞–π—à–∏—Ö –¥–∞—Ç—ã
def get_delivery_dates():
    return [(datetime.now() + timedelta(days=i)).strftime("%d.%m.%Y") for i in range(1, 4)]

time_slots = ['10:00‚Äì12:00', '12:00‚Äì15:00', '15:00‚Äì18:00']

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Flora –ü–µ—Ä–º—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )

# –ö–∞—Ç–∞–ª–æ–≥
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    chat_id = update.message.chat_id

    if text == 'üíê –ö–∞—Ç–∞–ª–æ–≥':
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–µ—Ç:", reply_markup=catalog_menu)

    elif text == 'üåπ –ë—É–∫–µ—Ç 1':
        await update.message.reply_photo(
            photo="https://floraservis.ru/upload/iblock/0d3/nkr6256qhf6b79bdh86ezgl9kufycbei.jpeg",
            caption="üåπ –ë—É–∫–µ—Ç 1 ‚Äî 18230‚ÇΩ\n\n‚ùå –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏."
        )

    elif text == 'üå∑ –ë—É–∫–µ—Ç 2':
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å üå∑", callback_data="order_2")]
        ])
        await update.message.reply_photo(
            photo="https://floraservis.ru/upload/iblock/0fc/abo9003vbqn2fusdjosgknhsxwczpq7j.jpeg",
            caption=f"üå∑ –ë—É–∫–µ—Ç 2 ‚Äî 18230‚ÇΩ\n\n–û—Å—Ç–∞–ª–æ—Å—å: {stock['2']} —à—Ç.",
            reply_markup=keyboard
        )

    elif text == 'üåª –ë—É–∫–µ—Ç 3':
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å üåª", callback_data="order_3")]
        ])
        await update.message.reply_photo(
            photo="https://floraservis.ru/upload/iblock/e25/f2bvr479poaj4h1qp9fx6o41slldkwqt.jpg",
            caption="üåª –ë—É–∫–µ—Ç 3 ‚Äî 32600‚ÇΩ",
            reply_markup=keyboard
        )

    elif text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

    elif text == 'üõç –ó–∞–∫–∞–∑–∞—Ç—å':
        await update.message.reply_text(
            "–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑:\n"
            "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ üíê –ö–∞—Ç–∞–ª–æ–≥\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–µ—Ç\n"
            "3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–∫–∞–∑–∞—Ç—å' –ø–æ–¥ –Ω–∏–º"
        )

    elif text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã':
        await update.message.reply_text(
            "üìç –ü–µ—Ä–º—å, –ö–∞—Ä–ø–∏–Ω—Å–∫–æ–≥–æ 91–¥\nüìû +7 (342) 214-88-99\n‚è∞ 9:00‚Äì21:00"
        )

    else:
        if chat_id in user_state and user_state[chat_id]["step"] == "get_name_phone":
            user_state[chat_id]["contact"] = text
            await update.message.reply_text(
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!\n\n"
                f"–ë—É–∫–µ—Ç: {user_state[chat_id]['bouquet']}\n"
                f"–î–∞—Ç–∞: {user_state[chat_id]['date']}\n"
                f"–í—Ä–µ–º—è: {user_state[chat_id]['time']}\n"
                f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {text}"
            )
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
            b_id = user_state[chat_id]["bouquet_id"]
            if b_id in stock and stock[b_id] > 0:
                stock[b_id] -= 1
            del user_state[chat_id]
        else:
            await update.message.reply_text("–Ø –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É üòä")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id

    bouquet_id = query.data.split("_")[1]
    if stock[bouquet_id] == 0:
        await query.message.reply_text("‚ùå –≠—Ç–æ—Ç –±—É–∫–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    bouquet_names = {"2": "üå∑ –ë—É–∫–µ—Ç 2", "3": "üåª –ë—É–∫–µ—Ç 3"}
    user_state[chat_id] = {
        "step": "choose_date",
        "bouquet": bouquet_names[bouquet_id],
        "bouquet_id": bouquet_id
    }

    buttons = [[InlineKeyboardButton(date, callback_data=f"date_{date}")] for date in get_delivery_dates()]
    markup = InlineKeyboardMarkup(buttons)
    await query.message.reply_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {bouquet_names[bouquet_id]}.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
async def handle_next_steps(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    data = query.data

    if chat_id not in user_state:
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.")
        return

    if data.startswith("date_"):
        chosen_date = data.split("_")[1]
        user_state[chat_id]["date"] = chosen_date
        user_state[chat_id]["step"] = "choose_time"

        buttons = [[InlineKeyboardButton(t, callback_data=f"time_{t}")] for t in time_slots]
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=InlineKeyboardMarkup(buttons))

    elif data.startswith("time_"):
        chosen_time = data.split("_")[1]
        user_state[chat_id]["time"] = chosen_time
        user_state[chat_id]["step"] = "get_name_phone"
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

# –ó–∞–ø—É—Å–∫
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(handle_next_steps, pattern="^(date_|time_)"))
app.add_handler(CallbackQueryHandler(handle_callback, pattern="^order_"))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
app.run_polling()
