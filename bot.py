
import logging
import os
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω
TOKEN = os.environ.get("BOT_TOKEN")

# –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±—É–∫–µ—Ç–æ–≤
bouquet_availability = {
    "1": False,  # –ë—É–∫–µ—Ç 1 –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    "2": True,
    "3": True
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    [['üíê –ö–∞—Ç–∞–ª–æ–≥', 'üõç –ó–∞–∫–∞–∑–∞—Ç—å'], ['üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã']],
    resize_keyboard=True
)

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Flora –ü–µ—Ä–º—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )

# –ö–∞—Ç–∞–ª–æ–≥ –º–µ–Ω—é ‚Äî —Å—Ç—Ä–æ–∏–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
def get_catalog_menu():
    buttons = []
    if bouquet_availability["1"]:
        buttons.append(['üåπ –ë—É–∫–µ—Ç 1'])
    else:
        buttons.append(['üåπ –ë—É–∫–µ—Ç 1 (–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏)'])
    if bouquet_availability["2"]:
        buttons.append(['üå∑ –ë—É–∫–µ—Ç 2'])
    if bouquet_availability["3"]:
        buttons.append(['üåª –ë—É–∫–µ—Ç 3'])
    buttons.append(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥'])
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == 'üíê –ö–∞—Ç–∞–ª–æ–≥':
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–µ—Ç:", reply_markup=get_catalog_menu())

    elif text.startswith('üåπ –ë—É–∫–µ—Ç 1'):
        if bouquet_availability["1"]:
            keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å üåπ", callback_data="order_1")]])
            caption = "üåπ –ë—É–∫–µ—Ç 1 ‚Äî 18230‚ÇΩ"
        else:
            keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏", callback_data="unavailable")]])
            caption = "üåπ –ë—É–∫–µ—Ç 1 ‚Äî 18230‚ÇΩ\n\n‚ùå –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"

        await update.message.reply_photo(
            photo="https://floraservis.ru/upload/iblock/0d3/nkr6256qhf6b79bdh86ezgl9kufycbei.jpeg",
            caption=caption,
            reply_markup=keyboard
        )

    elif text == 'üå∑ –ë—É–∫–µ—Ç 2':
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å üå∑", callback_data="order_2")]])
        await update.message.reply_photo(
            photo="https://floraservis.ru/upload/iblock/0fc/abo9003vbqn2fusdjosgknhsxwczpq7j.jpeg",
            caption="üå∑ –ë—É–∫–µ—Ç 2 ‚Äî 18230‚ÇΩ",
            reply_markup=keyboard
        )

    elif text == 'üåª –ë—É–∫–µ—Ç 3':
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å üåª", callback_data="order_3")]])
        await update.message.reply_photo(
            photo="https://floraservis.ru/upload/iblock/e25/f2bvr479poaj4h1qp9fx6o41slldkwqt.jpg",
            caption="üåª –ë—É–∫–µ—Ç 3 ‚Äî 32600‚ÇΩ",
            reply_markup=keyboard
        )

    elif text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

    elif text == 'üõç –ó–∞–∫–∞–∑–∞—Ç—å':
        await update.message.reply_text("–î–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ: –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")

    elif text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã':
        await update.message.reply_text(
            "üìç –ü–µ—Ä–º—å, –ö–∞—Ä–ø–∏–Ω—Å–∫–æ–≥–æ 91–¥\nüìû +7 (342) 214-88-99\n‚è∞ 9:00‚Äì21:00"
        )

    else:
        await update.message.reply_text("–Ø –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É üòä")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data.startswith("order_"):
        bouquet = query.data.split("_")[1]
        names = {"1": "üåπ –ë—É–∫–µ—Ç 1", "2": "üå∑ –ë—É–∫–µ—Ç 2", "3": "üåª –ë—É–∫–µ—Ç 3"}
        name = names.get(bouquet, "–ë—É–∫–µ—Ç")

        if not bouquet_availability[bouquet]:
            await query.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±—É–∫–µ—Ç —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return

        await query.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {name}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:"
        )

    elif query.data == "unavailable":
        await query.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç –±—É–∫–µ—Ç —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

# –ó–∞–ø—É—Å–∫
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(handle_callback))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

app.run_polling()
