
import logging
import os
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

logging.basicConfig(level=logging.INFO)

TOKEN = os.environ.get("BOT_TOKEN")
admin_id = 519447526

# –û—Å—Ç–∞—Ç–∫–∏ –±—É–∫–µ—Ç–æ–≤
stock = {
    "1": 0,
    "2": 2,
    "3": 10
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    [['üíê –ö–∞—Ç–∞–ª–æ–≥', 'üõç –ó–∞–∫–∞–∑–∞—Ç—å'], ['üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã']],
    resize_keyboard=True
)

catalog_menu = ReplyKeyboardMarkup(
    [['üåπ –ë—É–∫–µ—Ç 1'], ['üå∑ –ë—É–∫–µ—Ç 2'], ['üåª –ë—É–∫–µ—Ç 3'], ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']],
    resize_keyboard=True
)

user_state = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Flora –ü–µ—Ä–º—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    # –®–∞–≥–∏ –∑–∞–∫–∞–∑–∞: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –∏–º—è
    if user_id in user_state and user_state[user_id]["step"] == "wait_name":
        user_state[user_id]["name"] = text
        user_state[user_id]["step"] = "wait_phone"
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    elif user_id in user_state and user_state[user_id]["step"] == "wait_phone":
        user_state[user_id]["phone"] = text
        data = user_state[user_id]

        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–µ—Ç–æ–≤
        stock[data["bouquet"]] -= 1

        # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        admin_msg = (
            f"üéâ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n"
            f"–ë—É–∫–µ—Ç: {data['bouquet_name']}\n"
            f"–î–∞—Ç–∞: {data['date']}\n"
            f"–í—Ä–µ–º—è: {data['time']}\n"
            f"–ò–º—è: {data['name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}"
        )
        await context.bot.send_message(chat_id=admin_id, text=admin_msg)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!\n"
            f"–ë—É–∫–µ—Ç: {data['bouquet_name']}\n–î–∞—Ç–∞: {data['date']}\n–í—Ä–µ–º—è: {data['time']}\n"
            f"–ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è!"
        )
        user_state.pop(user_id, None)
        return

    if text == 'üíê –ö–∞—Ç–∞–ª–æ–≥':
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–µ—Ç:", reply_markup=catalog_menu)

    elif text.startswith('üåπ –ë—É–∫–µ—Ç 1'):
        await send_bouquet_info(update, "1", "üåπ –ë—É–∫–µ—Ç 1", "https://floraservis.ru/upload/iblock/0d3/nkr6256qhf6b79bdh86ezgl9kufycbei.jpeg")

    elif text.startswith('üå∑ –ë—É–∫–µ—Ç 2'):
        await send_bouquet_info(update, "2", "üå∑ –ë—É–∫–µ—Ç 2", "https://floraservis.ru/upload/iblock/0fc/abo9003vbqn2fusdjosgknhsxwczpq7j.jpeg")

    elif text.startswith('üåª –ë—É–∫–µ—Ç 3'):
        await send_bouquet_info(update, "3", "üåª –ë—É–∫–µ—Ç 3", https://floraservis.ru/upload/iblock/e25/f2bvr479poaj4h1qp9fx6o41slldkwqt.jpg)   
    elif text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

    elif text == 'üõç –ó–∞–∫–∞–∑–∞—Ç—å':
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–µ—Ç –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.")

    elif text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã':
        await update.message.reply_text("üìç –ü–µ—Ä–º—å, –ö–∞—Ä–ø–∏–Ω—Å–∫–æ–≥–æ 91–¥\nüìû +7 (342) 214-88-99\n‚è∞ 9:00‚Äì21:00")

    else:
        await update.message.reply_text("–Ø –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É üòä")

async def send_bouquet_info(update, code, name, photo_url):
    count = stock[code]
    if count <= 0:
        await update.message.reply_photo(
            photo=photo_url,
            caption=f"{name}\n‚ùå –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
        )
    else:
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f"order_{code}")]])
        await update.message.reply_photo(
            photo=photo_url,
            caption=f"{name}\n–û—Å—Ç–∞–ª–æ—Å—å: {count} —à—Ç.",
            reply_markup=keyboard
        )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data.split("_")[1]
    names = {"1": "üåπ –ë—É–∫–µ—Ç 1", "2": "üå∑ –ë—É–∫–µ—Ç 2", "3": "üåª –ë—É–∫–µ—Ç 3"}
    name = names.get(data, "–ë—É–∫–µ—Ç")

    if stock[data] <= 0:
        await query.message.reply_text(f"{name} –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏.")
        return

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∑–∞–∫–∞–∑
    user_state[user_id] = {
        "bouquet": data,
        "bouquet_name": name,
        "step": "select_date"
    }

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("24 –∞–ø—Ä–µ–ª—è 2025", callback_data="date_24"),
         InlineKeyboardButton("25 –∞–ø—Ä–µ–ª—è 2025", callback_data="date_25"),
         InlineKeyboardButton("26 –∞–ø—Ä–µ–ª—è 2025", callback_data="date_26")]
    ])
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
async def handle_inline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()
    data = query.data

    if user_id not in user_state:
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.")
        return

    if data.startswith("date_"):
        date = data.split("_")[1]
        date_text = {
            "24": "24 –∞–ø—Ä–µ–ª—è 2025",
            "25": "25 –∞–ø—Ä–µ–ª—è 2025",
            "26": "26 –∞–ø—Ä–µ–ª—è 2025"
        }.get(date, "")
        user_state[user_id]["date"] = date_text
        user_state[user_id]["step"] = "select_time"

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("9:00 ‚Äì 12:00", callback_data="time_morning")],
            [InlineKeyboardButton("12:00 ‚Äì 16:00", callback_data="time_day")],
            [InlineKeyboardButton("16:00 ‚Äì 20:00", callback_data="time_evening")]
        ])
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=keyboard)

    elif data.startswith("time_"):
        time = {
            "morning": "9:00 ‚Äì 12:00",
            "day": "12:00 ‚Äì 16:00",
            "evening": "16:00 ‚Äì 20:00"
        }.get(data.split("_")[1], "")
        user_state[user_id]["time"] = time
        user_state[user_id]["step"] = "wait_name"
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(handle_callback, pattern="^order_"))
app.add_handler(CallbackQueryHandler(handle_inline, pattern="^(date_|time_)"))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

app.run_polling()
