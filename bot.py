
import logging
import os
from datetime import datetime, timedelta
from telegram import (
    Update, ReplyKeyboardMarkup, InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω
TOKEN = os.environ.get("BOT_TOKEN")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    [['üíê –ö–∞—Ç–∞–ª–æ–≥', 'üõç –ó–∞–∫–∞–∑–∞—Ç—å'], ['üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã']],
    resize_keyboard=True
)

# –ö–∞—Ç–∞–ª–æ–≥
catalog_menu = ReplyKeyboardMarkup(
    [['üåπ –ë—É–∫–µ—Ç 1'], ['üå∑ –ë—É–∫–µ—Ç 2'], ['üåª –ë—É–∫–µ—Ç 3'], ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']],
    resize_keyboard=True
)

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Flora –ü–µ—Ä–º—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == 'üíê –ö–∞—Ç–∞–ª–æ–≥':
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–µ—Ç:", reply_markup=catalog_menu)

    elif text == 'üåπ –ë—É–∫–µ—Ç 1':
        await send_bouquet(update, "üåπ –ë—É–∫–µ—Ç 1", "18230‚ÇΩ", "https://floraservis.ru/upload/iblock/0d3/nkr6256qhf6b79bdh86ezgl9kufycbei.jpeg", "1")

    elif text == 'üå∑ –ë—É–∫–µ—Ç 2':
        await send_bouquet(update, "üå∑ –ë—É–∫–µ—Ç 2", "18230‚ÇΩ", "https://floraservis.ru/upload/iblock/0fc/abo9003vbqn2fusdjosgknhsxwczpq7j.jpeg", "2")

    elif text == 'üåª –ë—É–∫–µ—Ç 3':
        await send_bouquet(update, "üåª –ë—É–∫–µ—Ç 3", "32600‚ÇΩ", "https://floraservis.ru/upload/iblock/e25/f2bvr479poaj4h1qp9fx6o41slldkwqt.jpg", "3")

    elif text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

    elif text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã':
        await update.message.reply_text(
            "üìç –ü–µ—Ä–º—å, –ö–∞—Ä–ø–∏–Ω—Å–∫–æ–≥–æ 91–¥\nüìû +7 (342) 214-88-99\n‚è∞ 9:00‚Äì21:00"
        )

    else:
        # –û–∂–∏–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if context.user_data.get("waiting_for_contact"):
            context.user_data["contact_info"] = text
            await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ üòä")

            # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î –∏–ª–∏ –≤—ã–≤–µ—Å—Ç–∏
            print("üìù –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:")
            print(context.user_data)

            context.user_data.clear()
        else:
            await update.message.reply_text("–Ø –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É üòä")

# –ü–æ–∫–∞–∑ –±—É–∫–µ—Ç–∞
async def send_bouquet(update, name, price, photo_url, code):
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton(f"–ó–∞–∫–∞–∑–∞—Ç—å {name}", callback_data=f"order_{code}")]])
    await update.message.reply_photo(photo=photo_url, caption=f"{name} ‚Äî {price}", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç"
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    bouquet_id = query.data.split("_")[1]
    names = {"1": "üåπ –ë—É–∫–µ—Ç 1", "2": "üå∑ –ë—É–∫–µ—Ç 2", "3": "üåª –ë—É–∫–µ—Ç 3"}
    bouquet = names.get(bouquet_id, "–ë—É–∫–µ—Ç")

    context.user_data["bouquet"] = bouquet

    # –ü—Ä–µ–¥–ª–æ–∂–∏–º –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É
    today = datetime.today()
    dates = [(today + timedelta(days=i)).strftime("%d.%m.%Y") for i in range(3)]

    keyboard = [
        [InlineKeyboardButton(date, callback_data=f"date_{date}")] for date in dates
    ]
    await query.message.reply_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {bouquet}.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
async def handle_date_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data

    if data.startswith("date_"):
        date = data.replace("date_", "")
        context.user_data["date"] = date

        times = ["10:00‚Äì13:00", "13:00‚Äì16:00", "16:00‚Äì19:00"]
        keyboard = [
            [InlineKeyboardButton(t, callback_data=f"time_{t}")] for t in times
        ]
        await query.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {date}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif data.startswith("time_"):
        time = data.replace("time_", "")
        context.user_data["time"] = time
        context.user_data["waiting_for_contact"] = True

        await query.message.reply_text(
            f"–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫—É {context.user_data['date']} –≤ {time}.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
        )

# –ó–∞–ø—É—Å–∫
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(handle_date_time, pattern="^(date_|time_)"))
app.add_handler(CallbackQueryHandler(handle_callback, pattern="^order_"))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

app.run_polling()
