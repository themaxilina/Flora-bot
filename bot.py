
import logging
import os
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

logging.basicConfig(level=logging.INFO)

TOKEN = os.environ.get("BOT_TOKEN")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    [['üíê –ö–∞—Ç–∞–ª–æ–≥', 'üõç –ó–∞–∫–∞–∑–∞—Ç—å'], ['üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã']],
    resize_keyboard=True
)

# –ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞
catalog_menu = ReplyKeyboardMarkup(
    [['üåπ –ë—É–∫–µ—Ç 1'], ['üå∑ –ë—É–∫–µ—Ç 2'], ['üåª –ë—É–∫–µ—Ç 3'], ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']],
    resize_keyboard=True
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}  # user_id: { 'stage': 'waiting_for_contact', 'bouquet': 'üåπ –ë—É–∫–µ—Ç 1' }

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Flora –ü–µ—Ä–º—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    if user_id in user_states and user_states[user_id]['stage'] == 'waiting_for_contact':
        bouquet = user_states[user_id]['bouquet']
        await update.message.reply_text(
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑ –Ω–∞ {bouquet}!\n–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ: {text}\n–°–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è! üíê"
        )
        del user_states[user_id]
        return

    if text == 'üíê –ö–∞—Ç–∞–ª–æ–≥':
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–µ—Ç:", reply_markup=catalog_menu)

    elif text == 'üåπ –ë—É–∫–µ—Ç 1':
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å üåπ", callback_data="order_1")]])
        await update.message.reply_photo(
            photo="https://floraservis.ru/upload/iblock/0d3/nkr6256qhf6b79bdh86ezgl9kufycbei.jpeg",
            caption="üåπ –ë—É–∫–µ—Ç 1 ‚Äî 18230‚ÇΩ",
            reply_markup=keyboard
        )

    elif text == 'üå∑ –ë—É–∫–µ—Ç 2':
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å üå∑", callback_data="order_2")]])
        await update.message.reply_photo(
            photo="https://floraservis.ru/upload/iblock/0fc/abo9003vbqn2fusdjosgknhsxwczpq7j.jpeg",
            caption="üå∑ –ë—É–∫–µ—Ç 2 ‚Äî 18230‚ÇΩ",
            reply_markup=keyboard
        )

    elif text == 'üåª –ë—É–∫–µ—Ç 3':
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å üåª", callback_data="order_3")]])
        await update.message.reply_photo(
            photo="https://floraservis.ru/upload/iblock/e25/f2bvr479poaj4h1qp9fx6o41slldkwqt.jpg",
            caption="üåª –ë—É–∫–µ—Ç 3 ‚Äî 32600‚ÇΩ",
            reply_markup=keyboard
        )

    elif text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

    elif text == 'üõç –ó–∞–∫–∞–∑–∞—Ç—å':
        await update.message.reply_text("–î–ª—è –∑–∞–∫–∞–∑–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–µ—Ç –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞")

    elif text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã':
        await update.message.reply_text(
            "üìç –ü–µ—Ä–º—å, –ö–∞—Ä–ø–∏–Ω—Å–∫–æ–≥–æ 91–¥\nüìû +7 (342) 214-88-99\n‚è∞ 9:00‚Äì21:00"
        )

    else:
        await update.message.reply_text("–Ø –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É üòä")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫–∞–∑–∞—Ç—å"
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    bouquet_id = query.data.split("_")[1]
    names = {"1": "üåπ –ë—É–∫–µ—Ç 1", "2": "üå∑ –ë—É–∫–µ—Ç 2", "3": "üåª –ë—É–∫–µ—Ç 3"}
    bouquet_name = names.get(bouquet_id, "–ë—É–∫–µ—Ç")

    user_id = query.from_user.id
    user_states[user_id] = {
        'stage': 'waiting_for_contact',
        'bouquet': bouquet_name
    }

    await query.message.reply_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {bouquet_name}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:"
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(handle_callback))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

app.run_polling()
