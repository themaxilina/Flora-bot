
import logging
import os
from telegram import (
    Update, ReplyKeyboardMarkup, InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get("BOT_TOKEN")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    [['üíê –ö–∞—Ç–∞–ª–æ–≥', 'üõç –ó–∞–∫–∞–∑–∞—Ç—å'], ['üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã']],
    resize_keyboard=True
)

# –ú–µ–Ω—é –∫–∞—Ç–∞–ª–æ–≥–∞
catalog_menu = ReplyKeyboardMarkup(
    [['üåπ –ë—É–∫–µ—Ç 1'], ['üå∑ –ë—É–∫–µ—Ç 2'], ['üåª –ë—É–∫–µ—Ç 3'], ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']],
    resize_keyboard=True
)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_state = {}

# –û—Å—Ç–∞—Ç–∫–∏ –ø–æ –±—É–∫–µ—Ç–∞–º
stock = {"1": 0, "2": 3, "3": 3}  # –ë—É–∫–µ—Ç 1 –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Flora –ü–µ—Ä–º—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )

# –ö–Ω–æ–ø–∫–∏ –¥–∞—Ç—ã
def date_keyboard(bouquet_id):
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data=f"date_today_{bouquet_id}"),
            InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data=f"date_tomorrow_{bouquet_id}"),
            InlineKeyboardButton("–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞", callback_data=f"date_after_{bouquet_id}")
        ]
    ])

# –ö–Ω–æ–ø–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
def time_keyboard(bouquet_id, date_key):
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("09:00‚Äì12:00", callback_data=f"time_morning_{bouquet_id}_{date_key}"),
            InlineKeyboardButton("12:00‚Äì15:00", callback_data=f"time_day_{bouquet_id}_{date_key}"),
            InlineKeyboardButton("15:00‚Äì18:00", callback_data=f"time_evening_{bouquet_id}_{date_key}")
        ]
    ])

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.message.from_user.id

    if text == 'üíê –ö–∞—Ç–∞–ª–æ–≥':
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–µ—Ç:", reply_markup=catalog_menu)

    elif text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

    elif text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã':
        await update.message.reply_text("üìç –ü–µ—Ä–º—å, –ö–∞—Ä–ø–∏–Ω—Å–∫–æ–≥–æ 91–¥\nüìû +7 (342) 214-88-99\n‚è∞ 9:00‚Äì21:00")

    elif text in ['üåπ –ë—É–∫–µ—Ç 1', 'üå∑ –ë—É–∫–µ—Ç 2', 'üåª –ë—É–∫–µ—Ç 3']:
        b_id = text.split(" ")[1]
        photo_urls = {
            "1": "https://floraservis.ru/upload/iblock/0d3/nkr6256qhf6b79bdh86ezgl9kufycbei.jpeg",
            "2": "https://floraservis.ru/upload/iblock/0fc/abo9003vbqn2fusdjosgknhsxwczpq7j.jpeg",
            "3": "https://floraservis.ru/upload/iblock/e25/f2bvr479poaj4h1qp9fx6o41slldkwqt.jpg"
        }
        captions = {
            "1": "üåπ –ë—É–∫–µ—Ç 1 ‚Äî 18230‚ÇΩ",
            "2": "üå∑ –ë—É–∫–µ—Ç 2 ‚Äî 18230‚ÇΩ",
            "3": "üåª –ë—É–∫–µ—Ç 3 ‚Äî 32600‚ÇΩ"
        }

        if stock[b_id] == 0:
            await update.message.reply_photo(
                photo=photo_urls[b_id],
                caption=f"{captions[b_id]}\n\n‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
            )
        else:
            keyboard = InlineKeyboardMarkup(
                [[InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f"order_{b_id}")]]
            )
            await update.message.reply_photo(
                photo=photo_urls[b_id],
                caption=captions[b_id],
                reply_markup=keyboard
            )

    elif text == 'üõç –ó–∞–∫–∞–∑–∞—Ç—å':
        await update.message.reply_text("–î–ª—è –∑–∞–∫–∞–∑–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω
    elif user_id in user_state and "time" in user_state[user_id]:
        await collect_user_info(update, context)

    else:
        await update.message.reply_text("–Ø –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É üòä")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    if data.startswith("order_"):
        bouquet_id = data.split("_")[1]

        if stock[bouquet_id] == 0:
            await query.message.reply_text("‚ùå –ë—É–∫–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return

        user_state[user_id] = {"bouquet_id": bouquet_id}
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=date_keyboard(bouquet_id))

    elif data.startswith("date_"):
        _, date_key, bouquet_id = data.split("_")
        user_state[user_id]["date"] = date_key
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=time_keyboard(bouquet_id, date_key))

    elif data.startswith("time_"):
        _, time_key, bouquet_id, date_key = data.split("_")
        user_state[user_id]["time"] = time_key
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def collect_user_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    if user_id not in user_state:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.")
        return

    info = user_state[user_id]

    if "bouquet_id" not in info or "date" not in info or "time" not in info:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–µ—Ç, –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.")
        return

    info["contact"] = text

    bouquet_names = {"1": "üåπ –ë—É–∫–µ—Ç 1", "2": "üå∑ –ë—É–∫–µ—Ç 2", "3": "üåª –ë—É–∫–µ—Ç 3"}
    time_names = {"morning": "09:00‚Äì12:00", "day": "12:00‚Äì15:00", "evening": "15:00‚Äì18:00"}
    date_names = {"today": "–°–µ–≥–æ–¥–Ω—è", "tomorrow": "–ó–∞–≤—Ç—Ä–∞", "after": "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"}

    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!\n\n"
        f"{bouquet_names.get(info['bouquet_id'])}\n"
        f"–î–∞—Ç–∞: {date_names.get(info['date'])}\n"
        f"–í—Ä–µ–º—è: {time_names.get(info['time'])}\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {info['contact']}"
    )

    # –£–º–µ–Ω—å—à–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫
    if stock[info['bouquet_id']] > 0:
        stock[info['bouquet_id']] -= 1

    del user_state[user_id]

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(handle_callback))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

app.run_polling()
