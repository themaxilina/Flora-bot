
import logging
import os
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

logging.basicConfig(level=logging.INFO)

TOKEN = os.environ.get("BOT_TOKEN")

main_menu = ReplyKeyboardMarkup(
    [['üíê –ö–∞—Ç–∞–ª–æ–≥', 'üõç –ó–∞–∫–∞–∑–∞—Ç—å'], ['üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã']],
    resize_keyboard=True
)

catalog_menu = ReplyKeyboardMarkup(
    [['üåπ –ë—É–∫–µ—Ç 1'], ['üå∑ –ë—É–∫–µ—Ç 2'], ['üåª –ë—É–∫–µ—Ç 3'], ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']],
    resize_keyboard=True
)

# –ù–∞–ª–∏—á–∏–µ –±—É–∫–µ—Ç–æ–≤
stock = {
    "1": 0,  # –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏
    "2": 3,
    "3": 3
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_state = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Flora –ü–µ—Ä–º—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.message.from_user.id

    if text == 'üíê –ö–∞—Ç–∞–ª–æ–≥':
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–µ—Ç:", reply_markup=catalog_menu)

    elif text.startswith('üåπ –ë—É–∫–µ—Ç 1'):
        if stock["1"] <= 0:
            await update.message.reply_photo(
                photo="https://floraservis.ru/upload/iblock/0d3/nkr6256qhf6b79bdh86ezgl9kufycbei.jpeg",
                caption="üåπ –ë—É–∫–µ—Ç 1 ‚Äî ‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
            )
        else:
            keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å üåπ", callback_data="order_1")]])
            await update.message.reply_photo(
                photo="https://floraservis.ru/upload/iblock/0d3/nkr6256qhf6b79bdh86ezgl9kufycbei.jpeg",
                caption="üåπ –ë—É–∫–µ—Ç 1 ‚Äî 18230‚ÇΩ",
                reply_markup=keyboard
            )

    elif text == 'üå∑ –ë—É–∫–µ—Ç 2':
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å üå∑", callback_data="order_2")]])
        await update.message.reply_photo(
            photo="https://floraservis.ru/upload/iblock/0fc/abo9003vbqn2fusdjosgknhsxwczpq7j.jpeg",
            caption="üå∑ –ë—É–∫–µ—Ç 2 ‚Äî 18230‚ÇΩ",
            reply_markup=keyboard
        )

    elif text == 'üåª –ë—É–∫–µ—Ç 3':
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å üåª", callback_data="order_3")]])
        await update.message.reply_photo(
            photo="https://floraservis.ru/upload/iblock/e25/f2bvr479poaj4h1qp9fx6o41slldkwqt.jpg",
            caption="üåª –ë—É–∫–µ—Ç 3 ‚Äî 32600‚ÇΩ",
            reply_markup=keyboard
        )

    elif text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

    elif text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã':
        await update.message.reply_text("üìç –ü–µ—Ä–º—å, –ö–∞—Ä–ø–∏–Ω—Å–∫–æ–≥–æ 91–¥\nüìû +7 (342) 214-88-99\n‚è∞ 9:00‚Äì21:00")

# –®–∞–≥ 1: –≤—ã–±–æ—Ä –±—É–∫–µ—Ç–∞
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    bouquet_id = query.data.split("_")[1]
    user_state[user_id] = {"bouquet_id": bouquet_id}

    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É
    date_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="date_today")],
        [InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data="date_tomorrow")],
        [InlineKeyboardButton("–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞", callback_data="date_after")]
    ])
    await query.message.reply_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –±—É–∫–µ—Ç ‚Ññ" + bouquet_id + ".\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=date_keyboard)

# –®–∞–≥ 2: –≤—ã–±–æ—Ä –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
async def handle_date_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data

    if data.startswith("date_"):
        date_choice = data.split("_")[1]
        user_state[user_id]["date"] = date_choice

        time_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("09:00‚Äì12:00", callback_data="time_morning")],
            [InlineKeyboardButton("12:00‚Äì15:00", callback_data="time_day")],
            [InlineKeyboardButton("15:00‚Äì18:00", callback_data="time_evening")]
        ])
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=time_keyboard)

    elif data.startswith("time_"):
        time_choice = data.split("_")[1]
        user_state[user_id]["time"] = time_choice
        await query.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ê–Ω–Ω–∞, +79001234567)")

# –®–∞–≥ 3: –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def collect_user_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    if user_id in user_state and "time" in user_state[user_id]:
        user_state[user_id]["contact"] = text

        info = user_state[user_id]
        bouquet_names = {"1": "üåπ –ë—É–∫–µ—Ç 1", "2": "üå∑ –ë—É–∫–µ—Ç 2", "3": "üåª –ë—É–∫–µ—Ç 3"}
        time_names = {"morning": "09:00‚Äì12:00", "day": "12:00‚Äì15:00", "evening": "15:00‚Äì18:00"}
        date_names = {"today": "–°–µ–≥–æ–¥–Ω—è", "tomorrow": "–ó–∞–≤—Ç—Ä–∞", "after": "–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"}

        await update.message.reply_text(
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!\n\n"
            f"{bouquet_names.get(info['bouquet_id'])}\n"
            f"–î–∞—Ç–∞: {date_names.get(info['date'])}\n"
            f"–í—Ä–µ–º—è: {time_names.get(info['time'])}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {info['contact']}"
        )

        if stock[info['bouquet_id']] > 0:
            stock[info['bouquet_id']] -= 1

        del user_state[user_id]

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–µ—Ç –∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.")

# –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(handle_callback, pattern="order_"))
app.add_handler(CallbackQueryHandler(handle_date_time, pattern="date_.*|time_.*"))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, collect_user_info))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

app.run_polling()
