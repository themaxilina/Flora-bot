
import logging
import os
from datetime import datetime, timedelta
from telegram import (
    Update, ReplyKeyboardMarkup, InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

logging.basicConfig(level=logging.INFO)

TOKEN = os.environ.get("BOT_TOKEN")  # –ü–æ–¥—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω
ADMIN_ID = 519447526  # –¢–≤–æ–π Telegram user ID

# –ù–∞–ª–∏—á–∏–µ –±—É–∫–µ—Ç–æ–≤
stock = {
    "1": 0,
    "2": 2,
    "3": 5
}

# –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–æ–≤
user_order_data = {}

main_menu = ReplyKeyboardMarkup(
    [['üíê –ö–∞—Ç–∞–ª–æ–≥', 'üõç –ó–∞–∫–∞–∑–∞—Ç—å'], ['üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã']],
    resize_keyboard=True
)

catalog_menu = ReplyKeyboardMarkup(
    [['üåπ –ë—É–∫–µ—Ç 1'], ['üå∑ –ë—É–∫–µ—Ç 2'], ['üåª –ë—É–∫–µ—Ç 3'], ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']],
    resize_keyboard=True
)

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Flora –ü–µ—Ä–º—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )

# –ö–∞—Ç–∞–ª–æ–≥ –∏ –≤—ã–±–æ—Ä –±—É–∫–µ—Ç–æ–≤
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == 'üíê –ö–∞—Ç–∞–ª–æ–≥':
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–µ—Ç:", reply_markup=catalog_menu)

    elif text == 'üåπ –ë—É–∫–µ—Ç 1':
        if stock["1"] == 0:
            await update.message.reply_photo(
                photo="https://floraservis.ru/upload/iblock/0d3/nkr6256qhf6b79bdh86ezgl9kufycbei.jpeg",
                caption="üåπ –ë—É–∫–µ—Ç 1 ‚Äî 18230‚ÇΩ\n‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
            )
        else:
            keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å üåπ", callback_data="order_1")]])
            await update.message.reply_photo(
                photo="https://floraservis.ru/upload/iblock/0d3/nkr6256qhf6b79bdh86ezgl9kufycbei.jpeg",
                caption=f"üåπ –ë—É–∫–µ—Ç 1 ‚Äî 18230‚ÇΩ\n–û—Å—Ç–∞–ª–æ—Å—å: {stock['1']}",
                reply_markup=keyboard
            )

    elif text == 'üå∑ –ë—É–∫–µ—Ç 2':
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å üå∑", callback_data="order_2")]])
        await update.message.reply_photo(
            photo="https://floraservis.ru/upload/iblock/0fc/abo9003vbqn2fusdjosgknhsxwczpq7j.jpeg",
            caption=f"üå∑ –ë—É–∫–µ—Ç 2 ‚Äî 18230‚ÇΩ\n–û—Å—Ç–∞–ª–æ—Å—å: {stock['2']}",
            reply_markup=keyboard
        )

    elif text == 'üåª –ë—É–∫–µ—Ç 3':
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å üåª", callback_data="order_3")]])
        await update.message.reply_photo(
            photo="https://floraservis.ru/upload/iblock/e25/f2bvr479poaj4h1qp9fx6o41slldkwqt.jpg",
            caption=f"üåª –ë—É–∫–µ—Ç 3 ‚Äî 32600‚ÇΩ\n–û—Å—Ç–∞–ª–æ—Å—å: {stock['3']}",
            reply_markup=keyboard
        )

    elif text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

    elif text == 'üõç –ó–∞–∫–∞–∑–∞—Ç—å':
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–µ—Ç —á–µ—Ä–µ–∑ –∫–∞—Ç–∞–ª–æ–≥ üå∏")

    elif text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã':
        await update.message.reply_text(
            "üìç –ü–µ—Ä–º—å, –ö–∞—Ä–ø–∏–Ω—Å–∫–æ–≥–æ 91–¥\nüìû +7 (342) 214-88-99\n‚è∞ 9:00‚Äì21:00"
        )
    else:
        user_id = update.message.from_user.id
        if user_id in user_order_data and 'waiting_for' in user_order_data[user_id]:
            stage = user_order_data[user_id]['waiting_for']

            if stage == 'time':
                user_order_data[user_id]['time'] = text
                user_order_data[user_id]['waiting_for'] = 'name'
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

            elif stage == 'name':
                user_order_data[user_id]['name'] = text
                user_order_data[user_id]['waiting_for'] = 'phone'
                await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

            elif stage == 'phone':
                user_order_data[user_id]['phone'] = text
                user_data = user_order_data[user_id]

                bouquet = user_data['bouquet']
                date = user_data['date']
                time = user_data['time']
                name = user_data['name']
                phone = user_data['phone']

                stock[bouquet] -= 1  # —É–º–µ–Ω—å—à–∞–µ–º –Ω–∞–ª–∏—á–∏–µ

                msg = (
                    f"‚úÖ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
                    f"üå∏ –ë—É–∫–µ—Ç ‚Ññ{bouquet}\nüìÖ –î–∞—Ç–∞: {date}\nüïí –í—Ä–µ–º—è: {time}\n"
                    f"üë§ –ò–º—è: {name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}"
                )

                await context.bot.send_message(chat_id=ADMIN_ID, text=msg)
                await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è üíê")

                del user_order_data[user_id]
            else:
                await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            await update.message.reply_text("–Ø –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É üòä")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ "–ó–∞–∫–∞–∑–∞—Ç—å"
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    bouquet = query.data.split("_")[1]

    if stock[bouquet] == 0:
        await query.message.reply_text("‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ—Ç –±—É–∫–µ—Ç –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.")
        return

    user_order_data[user_id] = {'bouquet': bouquet}

    # –í—ã–±–æ—Ä –¥–∞—Ç—ã
    today = datetime.today()
    dates = [today + timedelta(days=i) for i in range(3)]
    buttons = [
        [InlineKeyboardButton(date.strftime("%d %B %Y"), callback_data=f"date_{date.strftime('%Y-%m-%d')}")]
        for date in dates
    ]
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=InlineKeyboardMarkup(buttons))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
async def handle_date_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    data = query.data

    if data.startswith("date_"):
        date_str = data.split("_")[1]
        user_order_data[user_id]['date'] = datetime.strptime(date_str, "%Y-%m-%d").strftime("%d %B %Y")
        user_order_data[user_id]['waiting_for'] = 'time'

        time_buttons = [
            [InlineKeyboardButton("09:00‚Äì12:00", callback_data="time_09:00‚Äì12:00")],
            [InlineKeyboardButton("12:00‚Äì15:00", callback_data="time_12:00‚Äì15:00")],
            [InlineKeyboardButton("15:00‚Äì18:00", callback_data="time_15:00‚Äì18:00")]
        ]
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=InlineKeyboardMarkup(time_buttons))

    elif data.startswith("time_"):
        time_str = data.split("_")[1]
        user_order_data[user_id]['time'] = time_str
        user_order_data[user_id]['waiting_for'] = 'name'
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")

# –ó–∞–ø—É—Å–∫
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(handle_callback, pattern="order_"))
app.add_handler(CallbackQueryHandler(handle_date_time, pattern="^(date_|time_)"))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
app.run_polling()
