
import logging
import os
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

logging.basicConfig(level=logging.INFO)

TOKEN = os.environ.get("BOT_TOKEN")
ADMIN_CHAT_ID = 519447526  # ‚Üê —Ç–≤–æ–π ID

main_menu = ReplyKeyboardMarkup(
    [['üíê –ö–∞—Ç–∞–ª–æ–≥', 'üõç –ó–∞–∫–∞–∑–∞—Ç—å'], ['üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã']],
    resize_keyboard=True
)

catalog_menu = ReplyKeyboardMarkup(
    [['üåπ –ë—É–∫–µ—Ç 1'], ['üå∑ –ë—É–∫–µ—Ç 2'], ['üåª –ë—É–∫–µ—Ç 3'], ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']],
    resize_keyboard=True
)

# –°—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_state = {}

# –û—Å—Ç–∞—Ç–∫–∏
stock = {
    "1": 0,
    "2": 2,
    "3": 10
}

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Flora –ü–µ—Ä–º—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )

# –ö–æ–º–∞–Ω–¥—ã
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    text = update.message.text

    if text == 'üíê –ö–∞—Ç–∞–ª–æ–≥':
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–µ—Ç:", reply_markup=catalog_menu)

    elif text == 'üåπ –ë—É–∫–µ—Ç 1':
        await update.message.reply_photo(
            photo="https://floraservis.ru/upload/iblock/0d3/nkr6256qhf6b79bdh86ezgl9kufycbei.jpeg",
            caption="üåπ –ë—É–∫–µ—Ç 1 ‚Äî 18230‚ÇΩ\n‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏",
        )

    elif text == 'üå∑ –ë—É–∫–µ—Ç 2':
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å üå∑", callback_data="order_2")]])
        await update.message.reply_photo(
            photo="https://floraservis.ru/upload/iblock/0fc/abo9003vbqn2fusdjosgknhsxwczpq7j.jpeg",
            caption=f"üå∑ –ë—É–∫–µ—Ç 2 ‚Äî 18230‚ÇΩ\n–û—Å—Ç–∞–ª–æ—Å—å: {stock['2']} —à—Ç.",
            reply_markup=keyboard
        )

    elif text == 'üåª –ë—É–∫–µ—Ç 3':
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å üåª", callback_data="order_3")]])
        await update.message.reply_photo(
            photo="https://floraservis.ru/upload/iblock/e25/f2bvr479poaj4h1qp9fx6o41slldkwqt.jpg",
            caption=f"üåª –ë—É–∫–µ—Ç 3 ‚Äî 32600‚ÇΩ\n–û—Å—Ç–∞–ª–æ—Å—å: {stock['3']} —à—Ç.",
            reply_markup=keyboard
        )

    elif text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu)

    elif chat_id in user_state and user_state[chat_id]["step"] == "get_name_phone":
        user_state[chat_id]["contact"] = text

        await update.message.reply_text(
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!\n\n"
            f"–ë—É–∫–µ—Ç: {user_state[chat_id]['bouquet']}\n"
            f"–î–∞—Ç–∞: {user_state[chat_id]['date']}\n"
            f"–í—Ä–µ–º—è: {user_state[chat_id]['time']}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {text}"
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=(
                "üõé –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
                f"–ë—É–∫–µ—Ç: {user_state[chat_id]['bouquet']}\n"
                f"–î–∞—Ç–∞: {user_state[chat_id]['date']}\n"
                f"–í—Ä–µ–º—è: {user_state[chat_id]['time']}\n"
                f"–ö–æ–Ω—Ç–∞–∫—Ç—ã: {text}"
            )
        )

        # –£–º–µ–Ω—å—à–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫
        b_id = user_state[chat_id]["bouquet_id"]
        if b_id in stock and stock[b_id] > 0:
            stock[b_id] -= 1

        del user_state[chat_id]

    else:
        await update.message.reply_text("–Ø –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É üòä")

# –ö–Ω–æ–ø–∫–∏
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = query.message.chat_id
    await query.answer()

    data = query.data

    if data.startswith("order_"):
        b_id = data.split("_")[1]

        if stock[b_id] <= 0:
            await query.message.reply_text("‚ùå –≠—Ç–æ—Ç –±—É–∫–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            return

        user_state[chat_id] = {
            "step": "get_date",
            "bouquet_id": b_id,
            "bouquet": f"–ë—É–∫–µ—Ç {b_id}"
        }

        dates = InlineKeyboardMarkup([
            [InlineKeyboardButton("24 –∞–ø—Ä–µ–ª—è 2025", callback_data="date_24")],
            [InlineKeyboardButton("25 –∞–ø—Ä–µ–ª—è 2025", callback_data="date_25")],
            [InlineKeyboardButton("26 –∞–ø—Ä–µ–ª—è 2025", callback_data="date_26")],
        ])
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=dates)

    elif data.startswith("date_"):
        date_text = data.split("_")[1]
        dates_map = {
            "24": "24 –∞–ø—Ä–µ–ª—è 2025",
            "25": "25 –∞–ø—Ä–µ–ª—è 2025",
            "26": "26 –∞–ø—Ä–µ–ª—è 2025"
        }

        if chat_id in user_state:
            user_state[chat_id]["date"] = dates_map[date_text]
            user_state[chat_id]["step"] = "get_time"

            times = InlineKeyboardMarkup([
                [InlineKeyboardButton("10:00‚Äì12:00", callback_data="time_morning")],
                [InlineKeyboardButton("12:00‚Äì15:00", callback_data="time_day")],
                [InlineKeyboardButton("15:00‚Äì18:00", callback_data="time_evening")],
            ])
            await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=times)

    elif data.startswith("time_"):
        times_map = {
            "morning": "10:00‚Äì12:00",
            "day": "12:00‚Äì15:00",
            "evening": "15:00‚Äì18:00"
        }
        time = data.split("_")[1]

        if chat_id in user_state:
            user_state[chat_id]["time"] = times_map[time]
            user_state[chat_id]["step"] = "get_name_phone"
            await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

# –ó–∞–ø—É—Å–∫
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(handle_callback))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
app.run_polling()
